트리 (Tree)
Node 와 Branch를 이용해서 사이클X

이진트리(Binary Tree)형태의 구조로, 탐색(검색) 알고리즘 구현을 위해 많이 사용한다.

- 필수 용어
1) 노드(Node)
   트리에서 데이터를 저장하는 요소 + 데이터와 다른 연결된 노드에 대한 Branch정보

2) 루트 (Root Node) : 트리에 가장 최상위 노드
3) 래밸 (Level) : 최상위 노드를 Level 0으로 하였을 때, 하위 Branch로 연결된 노드의 깊이(Depth)
4) Parent Node(부모노드): 어떤 노드의 다음 레벨에 연결된 노드
5) Child Node(자식노드) : 어떤 노드에 상위 레벨과 연결된 노드
6) lef Node(Terminal Node) : Child Node가 하나도 없는 노드
7) Sibling : 동일한 Parent Node를 가진 노드
8) Depth : 트리에서 Node가 가질 수 있는 최대 Level


2. 이진 트리 : 노드의 최대 Branch가 2인 트리
   이진 탐색 트리 (Binary Search Tree,BST) : 이진트리에 추가적은 조건이 달린 트리
   왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 해당 노드보다 큰 값을 갖는다.


   데이터 탐색(검색)
3.컬렉션 프레임워크의 대부분의 클래스들은 싱글 스레드 환경에서 사용하도록 설계
Vector,HashTable 동기화된 메소드로 구성되어 있어 스레드 환경에서 데이터를 안전하게 처리가 가능

List<T> synchronizedList(List<T> list) : list를 동기화된 List 리턴
Set<T>  synchronizedSet(Set<T> set)
Map<T>  synchronizedMap(Map<T> map)

Lambda Expression (람다 표현식)

람다 표현식JavaB에서 도입됨.
함수형 프로그래밍 구조에 큰 변화가 생김.
단일메서드 인터페이스(함수형 인터페이스)의 인스턴스를 보다 명확하고 간결하게 표현
컬렉션 조작을 편리하게 한다.전반적인 코드의가독성과 유연성을 확장시키는 장점을 가지고 있다.

1. 람다 표현식의 필요성
   함수형 인터페이스의 새로운 인스턴스를 생성하려면 일반적으로 익명 내부 클래스를 사용하여 생성하였으나,
   이로 인해 코드가 복잡하고 번거로운 때가 많았다.
   람다 표현식으로 코드의 명확성을 높이고 복잡함을 줄이는 시나리오로 채택

문법)  (parameters) -> expression
3 가지 주요 컴포넌트
1. 매개변수 : 골호로 ()로 감싸은 메서드의 입력 매개변수
2. 화설표 토큰 : -> 매개변수와 표현식 본체와 구분하는 구분자
3. 본문 : 메서드이 실제 구현부로, 단일 표현식 또는 블럭 일 수 있다.

Functions<Integer,Integer> square = x -> x*x;

함수형 인터페이스
자바는 람다 표현식으로 구현할 수 있는 타입을 정의하기 위해 함수형인터페이스 개념을 사용함.
java.util.Function 패키지는 다양한 수와 타입의 인수를 받을 수 있는 함수형 인터페이스 구현












